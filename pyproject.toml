[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs",
  "hatchling",
]

[project]
name = "tap-transifex"
description = "`tap-transifex` is a Singer tap for Transifex, built with the Meltano SDK for Singer Taps."
readme = "README.md"
keywords = [
  "ELT",
  "singer.io",
  "Transifex",
]
license.file = "LICENSE"
maintainers = [ { name = "Edgar Ramírez-Mondragón", email = "edgarrmondragon@hey.com" } ]
authors = [ { name = "Edgar Ramírez-Mondragón", email = "edgarrmondragon@hey.com" } ]
requires-python = ">=3.9"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dynamic = [
  "version",
]
dependencies = [
  "requests~=2.32.2",
  "singer-sdk~=0.42.1",
]
optional-dependencies.dev = [
  "tap-transifex[testing,typing]",
]
optional-dependencies.testing = [
  "deptry>=0.12",
  "pytest>=8",
  "singer-sdk[testing]",
]
optional-dependencies.typing = [
  "mypy>=1.8",
  "types-requests>=2.31",
]
urls.Documentation = "https://github.com/edgarrmondragon/tap-transifex#readme"
urls.Homepage = "https://github.com/edgarrmondragon/tap-transifex"
urls.Repository = "https://github.com/edgarrmondragon/tap-transifex"
scripts."tap-transifex" = "tap_transifex.tap:TapTransifex.cli"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.sync.scripts]
console = "tap-transifex {args} --config ENV"
jsonl = "tap-transifex {args} --config ENV > tap-transifex.jsonl"

[tool.hatch.envs.test]
features = [ "testing" ]
[tool.hatch.envs.test.scripts]
integration = "pytest {args:tests}"
dependencies = "deptry ."

[tool.hatch.envs.all]
template = "test"
[[tool.hatch.envs.all.matrix]]
python = [ "3.9", "3.10", "3.11", "3.12", "3.13" ]

[tool.hatch.envs.typing]
features = [ "testing", "typing" ]
[tool.hatch.envs.typing.scripts]
check = "mypy --strict {args:tap_transifex tests}"

[tool.ruff]
line-length = 88

lint.select = [ "ALL" ]
lint.ignore = [
  "ANN101", # missing-type-self
  "COM812", # missing-trailing-comma
  "DJ",     # flake8-django
  "FIX002", # line-contains-todo
  "ISC001", # single-line-implicit-string-concatenation
  "PD",     # pandas-vet
]
lint.per-file-ignores."tests/*" = [
  "ANN201", # missing-return-type-public-function
  "S101",   # assert
  "SLF001", # private-member-access
]
lint.unfixable = [
  "ERA001", # commented-out-code
]
lint.flake8-annotations.allow-star-arg-any = true
lint.isort.known-first-party = [ "tap_transifex" ]
lint.isort.required-imports = [ "from __future__ import annotations" ]
lint.pydocstyle.convention = "google"

[tool.deptry.package_module_name_map]
mypy = "mypy"
pytest = "pytest"
tap-transifex = "tap_transifex"
types-requests = "requests"

[tool.deptry.per_rule_ignores]
DEP002 = [
  "deptry",
  "mypy",
  "pytest",
]

[tool.pytest.ini_options]
addopts = "-vvv"

[tool.mypy]
warn_redundant_casts = true
warn_return_any = true
warn_no_return = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [ "backoff.*" ]
